#include "secrets.h"
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "WiFi.h"

#define AWS_IOT_PUBLISH_TOPIC "esp32/sub"
#define AWS_IOT_SUBSCRIBE_TOPIC "esp32/sub"

#define lamp 23

WiFiClientSecure net = WiFiClientSecure();
PubSubClient client(net);

// Variables to manage timing
unsigned long lastPublishTime = 0;
const unsigned long publishInterval = 1000; // 1 second

void connectAWS()
{
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.println("Connecting to Wi-Fi");

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }

  // Configure WiFiClientSecure to use the AWS IoT device credentials
  net.setCACert(AWS_CERT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);

  // Connect to the MQTT broker on the AWS endpoint we defined earlier
  client.setServer(AWS_IOT_ENDPOINT, 8883);

  // Create a message handler
  client.setCallback(messageHandler);

  Serial.println("Connecting to AWS IoT");

  while (!client.connect(THINGNAME))
  {
    Serial.print(".");
    delay(100);
  }

  if (!client.connected())
  {
    Serial.println("AWS IoT Timeout!");
    return;
  }

  // Subscribe to a topic
  client.subscribe(AWS_IOT_SUBSCRIBE_TOPIC);

  Serial.println("AWS IoT Connected!");
}

void messageHandler(char* topic, byte* payload, unsigned int length)
{
  Serial.print("Incoming topic: ");
  Serial.println(topic);

  // Create a buffer for the payload and deserialize it into a JSON document
  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, payload, length);

  if (error) {
    Serial.print("Failed to parse JSON: ");
    Serial.println(error.c_str());
    return;
  }

  // Extract the "relay" value from the JSON document
  int relay = doc["relay"];

  Serial.print("Relay value: ");
  Serial.println(relay);

  // Control the lamp based on the "relay" value
  if (relay == 1) {
    digitalWrite(lamp, HIGH);
    Serial.println("Lamp turned ON");
  } else if (relay == 0) {
    digitalWrite(lamp, LOW);
    Serial.println("Lamp turned OFF");
  }
}

void publishSensorData()
{
  // Create a JSON document
  StaticJsonDocument<200> doc;

  // Generate a random sensor value between 0 and 100
  int sensorDHT = random(0, 101);

  // Simulate a timestamp using millis (you can replace this with a real timestamp if needed)
  unsigned long timestampDHT = millis();

  // Populate the JSON document
  doc["sensorDHT"] = sensorDHT;
  doc["timestampDHT"] = timestampDHT;

  // Serialize JSON to a string
  char jsonBuffer[512];
  serializeJson(doc, jsonBuffer);

  // Publish the message to the MQTT topic
  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);

  // Print to serial for debugging
  Serial.println("Publishing sensor data:");
  Serial.println(jsonBuffer);
}

void setup()
{
  Serial.begin(115200);
  connectAWS();
  pinMode(lamp, OUTPUT);
  digitalWrite(lamp, LOW);

  // Initialize random seed for sensor data
  randomSeed(analogRead(0));
}

void loop()
{
  client.loop();

  // Check if it's time to publish the data
  unsigned long currentTime = millis();
  if (currentTime - lastPublishTime > publishInterval)
  {
    publishSensorData();
    lastPublishTime = currentTime;
  }
}
